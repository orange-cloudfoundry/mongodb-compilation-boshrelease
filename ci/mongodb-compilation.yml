---
resource_types:
  - name: keyval
    type: docker-image
    source:
      repository: swce/keyval-resource
      
resources:

  - name: mongodb-compilation-bosh-release
    type: git
    source:
      uri: https://github.com/orange-cloudfoundry/mongodb-compilation-boshrelease.git
      branch: ((mongodb-compilation-boshrelease-repo.branch))

  - name: mongodb-version
    type: semver
    source: 
      initial_version: 1.0.0
      driver: git
      uri: https://github.com/orange-cloudfoundry/mongodb-compilation-boshrelease.git
      branch: ((mongodb-compilation-boshrelease-repo.branch))
      file: mongodb_compiled_version
      username: ((mongodb-compilation-boshrelease-repo.username))
      password: ((mongodb-compilation-boshrelease-repo.password))
      git_user: "((mongodb-compilation-boshrelease-repo.git_user)) <((mongodb-compilation-boshrelease-repo.email))>"

  - name: rocksdb-version
    type: semver
    source: 
      initial_version: 1.0.0
      driver: git
      uri: https://github.com/orange-cloudfoundry/mongodb-compilation-boshrelease.git
      branch: ((mongodb-compilation-boshrelease-repo.branch))
      file: rocksdb_compiled_version
      username: ((mongodb-compilation-boshrelease-repo.username))
      password: ((mongodb-compilation-boshrelease-repo.password))
      git_user: "((mongodb-compilation-boshrelease-repo.git_user)) <((mongodb-compilation-boshrelease-repo.email))>"

  - name: versions
    type: keyval

  - name: uploaded
    type: keyval

  - name: compiled
    type: keyval  

jobs:
- name: check-versions
  serial: true
  plan:
    - aggregate:
      - get: mongodb-compilation-bosh-release
      - get: mongodb-version
      - get: rocksdb-version

    - task: check-versions
      file: mongodb-compilation-bosh-release/ci/jobs/check-versions/tasks/check-versions.yml

    - put: versions
      params: {file: versions/keyval.properties}
           
- name: upload-src
  serial: true
  plan:
    
    - get: mongodb-compilation-bosh-release
    - task: create-bosh-config
      file: mongodb-compilation-bosh-release/ci/jobs/common/tasks/create-bosh-config.yml
      params:
        CA_CERT: ((bosh-server.ca))
        IP: ((bosh-server.ip))
        ALIAS: ((bosh-server.alias)) 
        USER: ((bosh-server.user))
        PASSWORD: ((bosh-server.password))
  
    - get: versions
      trigger: true
      passed: [check-versions]

    - task: download-src
      file: mongodb-compilation-bosh-release/ci/jobs/upload-src/tasks/download-src.yml

    - task: get-config-files
      file: mongodb-compilation-bosh-release/ci/jobs/common/tasks/get-config-files.yml
      params:
        ACCESS_KEY_ID: ((S3.access_key_id))
        SECRET_ACCESS_KEY: ((S3.secret_access_key))
        ENDPOINT_URL: ((S3.endpoint-url))
        BUCKET: ((S3.bucket))   

    - task: upload-bosh
      file: mongodb-compilation-bosh-release/ci/jobs/upload-src/tasks/upload-bosh.yml
      params:
        ALIAS: ((bosh-server.alias))

    - task: update-config-files
      file: mongodb-compilation-bosh-release/ci/jobs/upload-src/tasks/update-config-files.yml
      params:
        ALIAS: ((bosh-server.alias))
        BOSH_RELEASE: ((bosh-deployment.release))
        
    - task: upload-config-files
      file: mongodb-compilation-bosh-release/ci/jobs/common/tasks/upload-config-files.yml
      params:
        ACCESS_KEY_ID: ((S3.access_key_id))
        SECRET_ACCESS_KEY: ((S3.secret_access_key))
        ENDPOINT_URL: ((S3.endpoint-url))
        BUCKET: ((S3.bucket))
    - put: uploaded
      params: { file: uploaded/keyval.properties }

- name: compilation
  serial: true
  plan:
    - aggregate:
      - get: mongodb-compilation-bosh-release
      - get: uploaded
        trigger: true
        passed: [upload-src]

    - task: create-bosh-config
      file: mongodb-compilation-bosh-release/ci/jobs/common/tasks/create-bosh-config.yml
      params:
        CA_CERT: ((bosh-server.ca))
        IP: ((bosh-server.ip))
        ALIAS: ((bosh-server.alias)) 
        USER: ((bosh-server.user))
        PASSWORD: ((bosh-server.password))

    - task: get-config-files
      file: mongodb-compilation-bosh-release/ci/jobs/common/tasks/get-config-files.yml
      params:
        ACCESS_KEY_ID: ((S3.access_key_id))
        SECRET_ACCESS_KEY: ((S3.secret_access_key))
        ENDPOINT_URL: ((S3.endpoint-url))
        BUCKET: ((S3.bucket))
    
    - task: create-release
      file: mongodb-compilation-bosh-release/ci/jobs/compilation/tasks/create-release.yml
      params:
        ALIAS: ((bosh-server.alias))
        UUID: ((bosh-server.uuid))
        BOSH_RELEASE: ((bosh-deployment.release))
        DEPLOYMENT_NAME: ((bosh-deployment.name))
        INSTANCE_GROUP: ((bosh-deployment.instance-group))
        NETWORK: ((bosh-deployment.network))

    - put: compiled
      params: { file: compiled/keyval.properties }        

- name: create-archive
  serial: true
  plan:
    - aggregate:
      - get: mongodb-compilation-bosh-release
      - get: compiled
        trigger: true
        passed: [compilation]

    - task: create-bosh-config
      file: mongodb-compilation-bosh-release/ci/jobs/common/tasks/create-bosh-config.yml
      params:
        CA_CERT: ((bosh-server.ca))
        IP: ((bosh-server.ip))
        ALIAS: ((bosh-server.alias)) 
        USER: ((bosh-server.user))
        PASSWORD: ((bosh-server.password))

    - task: get-config-files
      file: mongodb-compilation-bosh-release/ci/jobs/common/tasks/get-config-files.yml
      params:
        ACCESS_KEY_ID: ((S3.access_key_id))
        SECRET_ACCESS_KEY: ((S3.secret_access_key))
        ENDPOINT_URL: ((S3.endpoint-url))
        BUCKET: ((S3.bucket))
    
    - task: make-archive
      file: mongodb-compilation-bosh-release/ci/jobs/create-archive/tasks/make-archive.yml
      params:
        ALIAS: ((bosh-server.alias))
        DEPLOYMENT_NAME: ((bosh-deployment.name))

    - task: upload-config-files
      file: mongodb-compilation-bosh-release/ci/jobs/common/tasks/upload-config-files.yml
      params:
        ACCESS_KEY_ID: ((S3.access_key_id))
        SECRET_ACCESS_KEY: ((S3.secret_access_key))
        ENDPOINT_URL: ((S3.endpoint-url))
        BUCKET: ((S3.bucket))

    - put: uploaded
      params: { file: uploaded/keyval.properties }    

- name: bump-versions
  serial: true
  plan:
    - aggregate:
      - get: versions
      - get: uploaded
        trigger: true
        passed: [create-archive]
      - get: mongodb-compilation-bosh-release  
    - task: propagate-versions
      file: mongodb-compilation-bosh-release/ci/jobs/bump-versions/tasks/propagate-versions.yml
    - put: mongodb-version
      params: { file: new_versions/mongodb }
    - put: rocksdb-version   
      params: { file: new_versions/rocksdb }

#- name: deployment-test
#  serial: true
#  plan:
#    - aggregate:
#      - get: mongodb-compilation-bosh-release
#      - get: archive
#        trigger: true
#        passed: [compilation]
#      - get: golang-release

#
#
#    - task: update-github
#      config:
#        platform: linux
#        image_resource:
#          type: docker-image
#          source:
#            repository: concourse/bosh-cli
#            tag: latest
#        inputs:
#          - name: to-upload
#        run:
#          path: /bin/bash
#          args:
#            - -exc
#            - |
#              cd to-upload || exit 115
#              git config --global user.email ((repo.email))
#              git config --global user.name "((repo.name))"
#              git branch "Upload-test"
#              git checkout Upload-test
#              git commit -m "Adding Last compiled blob to blob list" config/blobs.yml
#    - put: mongodb-compilation-bosh-release-out
#      params:
#        repository: to-upload
#
set -e # exit immediately if a simple command exits with a non-zero status
#set -u # report the usage of uninitialized variables

# $BOSH_COMPILE_TARGET - where this package & spec'd source files are available
# $BOSH_INSTALL_TARGET - where you copy/install files to be included in package
#/sbin/swapoff -a

export HOME=/var/vcap

#cp -a brokers $BOSH_INSTALL_TARGET/brokers

export LD_LIBRARY_PATH=${LD_LIBRARY_PATH:-''} # default to empty
for package_lib_dir in $(ls -d /var/vcap/packages/*/lib /var/vcap/packages/*/lib64)
do
  export LD_LIBRARY_PATH=${package_lib_dir}:$LD_LIBRARY_PATH
done

export C_INCLUDE_PATH=${C_INCLUDE_PATH:-''}
for package_inc_dir in $(ls -d /var/vcap/packages/*/include /var/vcap/packages/*/include/*/ )
do
  export C_INCLUDE_PATH=${package_inc_dir}:$C_INCLUDE_PATH
done

export PATH=/var/vcap/packages/gcc/bin:/var/vcap/packages/binutils/bin:/var/vcap/packages/python/bin/:/var/vcap/packages/scons/bin:/var/vcap/packages/openssl/bin:/var/vcap/packages/compilation-tools/bin:$PATH

# processing python virtualenv
mkdir -p /var/vcap/data/tmp/python_venv
virtualenv /var/vcap/data/tmp/python_venv
source /var/vcap/data/tmp/python_venv/bin/activate

# Retrieving number of cpus on compilation server
export cpun_=`lscpu | grep '^CPU('|tr -d [:space:]|cut -d":" -f2`

# processing rocksdb
for i in `find mongodb/ -type f -name 'rocksdb-*.tar.gz' -print`
do
  ext_dir=`tar -tvf $i |tail -1|tr -s [:space:]| cut -d" " -f6 |cut -d"/" -f1`
  tar xf $i
  cd $ext_dir
  CC=/var/vcap/packages/gcc/bin/gcc CXX=/var/vcap/packages/gcc/bin/g++ EXTRA_CFLAGS=-fPIC \
  CFLAGS="-I/var/vcap/packages/compressors/include \
          -I/var/vcap/packages/gcc/include \
          -I/var/vcap/packages/openssl/include/openssl" \
  LDFLAGS="-L/var/vcap/packages/compressors/lib \
           -L/var/vcap/packages/compressors/lib64 \
           -L/var/vcap/packages/gcc/lib \
           -L/var/vcap/packages/gcc/lib64 \
           -L/var/vcap/packages/openssl/lib \
           -lsnappy -llz4 -lzstd -lssl -lcrypto" \
  DISABLE_JEMALLOC=1 USE_RTTI=1 EXTRA_CXXFLAGS=-fPIC make -j $cpun_ static_lib
  INSTALL_PATH=$BOSH_INSTALL_TARGET make install
  cd ..
done

# extracting mongorocks
for i in `find mongodb/ -type f -name 'mongo-rocks-*.tar.gz' -print`
do
  mongo_rocks_dir=`tar -tvf $i |tail -1|tr -s [:space:]| cut -d" " -f6 |cut -d"/" -f1`
  tar xf $i
done

# extracting  mongodb python dependencies
for i in `find mongodb/ -type f -name 'mongodb-python-deps-*.tar.gz' -print`
do
  mongodb_python_deps_dir=`tar -tvf $i |tail -1|tr -s [:space:]| cut -d" " -f6 |cut -d"/" -f1`
  tar xf $i
done


for i in `find mongodb/ -type f -name 'mongodb-src*.tar.gz' -print`
do 
  ext_dir=`tar -tvf $i |tail -1|tr -s [:space:]| cut -d" " -f6 |cut -d"/" -f1`
  tar xf $i
  cd $ext_dir
# add rocksdb module to mongo
  mkdir -p src/mongo/db/modules/
  ln -sf $(readlink -f ../$mongo_rocks_dir) src/mongo/db/modules/rocks

  # installing python dependencies
  if [ -f buildscripts/requirements.txt ]
  then
    # processing subprocess32 which fall in error with pip
    ls ../${mongodb_python_deps_dir}/subprocess32*.tar.gz 1>/dev/null 2>&1
    if [ $? -eq 0 ]
    then
      mkdir -p /var/vcap/data/tmp/sub32
      find $(readlink -f ../${mongodb_python_deps_dir}) -type f -name 'subprocess32*.tar.gz' -exec sh -c 'tar xf $1 -C /var/vcap/data/tmp/sub32 --strip 1' {} {} \;
      cd /var/vcap/data/tmp/sub32
      ./configure
      python setup.py install
      cd -
    fi

    python -mpip install -r buildscripts/requirements.txt --no-index --find-links $(readlink -f ../${mongodb_python_deps_dir})

  fi

  # compiling mongodb

  export CC="/var/vcap/packages/gcc/bin/gcc" 
  export CXX="/var/vcap/packages/gcc/bin/g++" 
  export CPPPATH="$BOSH_INSTALL_TARGET/include \
           /var/vcap/packages/compressors/include \
           /var/vcap/packages/gcc/include \
           /var/vcap/packages/openssl/include/openssl" 
  export LIBPATH="$BOSH_INSTALL_TARGET/lib \
           /var/vcap/packages/compressors/lib \
           /var/vcap/packages/compressors/lib64 \
           /var/vcap/packages/gcc/lib \
           /var/vcap/packages/gcc/lib64 \
           /var/vcap/packages/openssl/lib"
  export LDFLAGS="-L/var/vcap/packages/compressors/lib \
           -L/var/vcap/packages/compressors/lib64 \
           -L/var/vcap/packages/gcc/lib \
           -L/var/vcap/packages/gcc/lib64 \
           -L/var/vcap/packages/openssl/lib \
           -L $BOSH_INSTALL_TARGET/lib \
           -lsnappy -llz4 -lzstd -lssl -lcrypto"
  export LIBS="lz4 zstd snappy ssl crypto"
  export CPPFLAGS="-I/var/vcap/packages/gcc/include \
            -I/var/vcap/packages/compressors/include \
            -I/var/vcap/packages/openssl/include/openssl \
            -I$BOSH_INSTALL_TARGET/include"
  export AR="/var/vcap/packages/binutils/bin/ar" 
  export RANLIB="/var/vcap/packages/binutils/bin/ranlib" 
  export LD="/var/vcap/packages/binutils/bin/ld" # not working ?
  export NM="/var/vcap/packages/binutils/bin/nm"

  # Patching SConstruct to retrieve environment non standard variables
  # Be careful this is python code so do not change indentation or it will affect the 
  sed -i "$(grep -n "\-\-\- other build setup" SConstruct|cut -d":" -f1)ifor key in Split('CC CXX AR RANLIB LD NM CFLAGS CXXFLAGS CCFLAGS LIBPATH'):\n  \
value = os.environ.get(key)\n  if value != None:\n    env[key] = Split(value)\nif os.environ.has_key('CPPFLAGS'):\n  \
env['CCFLAGS'] += SCons.Util.CLVar(os.environ['CPPFLAGS'])\nif os.environ.has_key('LDFLAGS'):\n  \
env['LINKFLAGS'] += SCons.Util.CLVar(os.environ['LDFLAGS'])\n" SConstruct

  #here is the text appended:
  #
  #for key in Split('CC CXX AR RANLIB LD NM CFLAGS CXXFLAGS CCFLAGS LIBPATH'):
  #  value = os.environ.get(key)
  #  if value != None:
  #    env[key] = Split(value)
  #if os.environ.has_key('CPPFLAGS'):
  #  env['CCFLAGS'] += SCons.Util.CLVar(os.environ['CPPFLAGS'])
  #if os.environ.has_key('LDFLAGS'):
  #  env['LINKFLAGS'] += SCons.Util.CLVar(os.environ['LDFLAGS'])

  # create symbolics links to linker -- dirty solution !! I didn t find how to pass linker path to scons

  for _bin in `find /var/vcap/packages/binutils/bin -type f -print`
  do
    if [ -x $_bin ]
    then
      fexec=`basename $_bin`
      [ -x /usr/bin/$fexec ] && mv /usr/bin/$fexec /usr/bin/${fexec}.old && ln -s $_bin /usr/bin/$fexec
    fi
  done

  # retrieve mongodb version from package name
  export _mongo_version=`echo $i|sed -e "s/.*[^[0-9]]*\([0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*\).*/\1/"`

  scons -j $cpun_ --ssl --prefix=$BOSH_INSTALL_TARGET   \
  --disable-warnings-as-errors \
  MONGO_VERSION=$_mongo_version \
  core install

  # striping binaries
  # mongo 3.6 introduce python script install_compass which should not be stripped
  file /var/vcap/packages/mongodb/bin/* \
  | grep -v "Python script" \
  | cut -d":" -f1 \
  | xargs -i strip -sg {}
  cd ..
done

# processing mongo-tools

for i in `find mongodb/ -type f -name 'mongo-tools-*.tar.gz' -print`
do
  ext_dir=`tar -tvf $i |tail -1|tr -s [:space:]| cut -d" " -f6 |cut -d"/" -f1`
  tar xf $i
  cd $ext_dir
  # need libpcap for mongoreplay
  go_compile_env=$(find /var/vcap/packages/golang-*-linux/bosh -name 'compile.env')
  [ "$go_compile_env" == "" ] && echo "Go compilation environment not found" && exit 1
  source $go_compile_env
  export CGO_LDFLAGS="-L/var/vcap/packages/gcc/lib -L/var/vcap/packages/gcc/lib64 -L/var/vcap/packages/openssl/lib"
  # initializing PKG_CONFIG_PATH
  export PKG_CONFIG_PATH="/var/vcap/packages/openssl/lib/pkgconfig:$PKG_CONFIG_PATH"
  ./set_gopath.sh
  # patching shebang which have to be set to #!/bin/bash 
  sed -ie "1s/^#\!.*$/#\!\/bin\/bash/" build.sh
  ./build.sh ssl
  [ ! -d $BOSH_INSTALL_TARGET/bin ] && mkdir -p $BOSH_INSTALL_TARGET/bin
  cp -rp bin/* $BOSH_INSTALL_TARGET/bin
  cd ..
done

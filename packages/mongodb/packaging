set -e # exit immediately if a simple command exits with a non-zero status
set -u # report the usage of uninitialized variables

# $BOSH_COMPILE_TARGET - where this package & spec'd source files are available
# $BOSH_INSTALL_TARGET - where you copy/install files to be included in package
#/sbin/swapoff -a

export HOME=/var/vcap

#cp -a brokers $BOSH_INSTALL_TARGET/brokers

export LD_LIBRARY_PATH=${LD_LIBRARY_PATH:-''} # default to empty
for package_lib_dir in $(ls -d /var/vcap/packages/*/lib /var/vcap/packages/*/lib64)
do
  export LD_LIBRARY_PATH=${package_lib_dir}:$LD_LIBRARY_PATH
done

export C_INCLUDE_PATH=${C_INCLUDE_PATH:-''}
for package_inc_dir in $(ls -d /var/vcap/packages/*/include)
do
  export C_INCLUDE_PATH=${package_inc_dir}:$C_INCLUDE_PATH
done

export PATH=/var/vcap/packages/gcc/bin:/var/vcap/packages/binutils/bin:/var/vcap/packages/python/bin/:/var/vcap/packages/scons/bin:$PATH

# Retrieving number of cpus on compilation server
export cpun_=`lscpu | grep '^CPU('|tr -d [:space:]|cut -d":" -f2`


# processing rocksdb
for i in `find mongodb/ -type f -name 'rocksdb-*.tar.gz' -print`
do
  ext_dir=`tar -tvf $i |tail -1|tr -s [:space:]| cut -d" " -f6 |cut -d"/" -f1`
  tar xf $i
  cd $ext_dir
  CC=/var/vcap/packages/gcc/bin/gcc CXX=/var/vcap/packages/gcc/bin/g++ EXTRA_CFLAGS=-fPIC \
  CFLAGS="-I/var/vcap/packages/compressors/include -I/var/vcap/packages/gcc/include" \
  LDFLAGS="-L/var/vcap/packages/compressors/lib -L/var/vcap/packages/gcc/lib -L/var/vcap/packages/gcc/lib64 -lsnappy -llz4 -lzstd" \
  EXTRA_CXXFLAGS=-fPIC DISABLE_JEMALLOC=1 PORTABLE=1 make -j $cpun_ static_lib
  INSTALL_PATH=$BOSH_INSTALL_TARGET make install
  cd ..
done

# extracting mongorocks
for i in `find mongodb/ -type f -name 'mongo-rocks-*.tar.gz' -print`
do
  mongo_rocks_dir=`tar -tvf $i |tail -1|tr -s [:space:]| cut -d" " -f6 |cut -d"/" -f1`
  tar xf $i
done

for i in `find mongodb/ -type f -name 'mongodb-src*.tar.gz' -print`
do 
  ext_dir=`tar -tvf $i |tail -1|tr -s [:space:]| cut -d" " -f6 |cut -d"/" -f1`
  tar xf $i
  cd $ext_dir
# add rocksdb module to mongo
  mkdir -p src/mongo/db/modules/
  ln -sf $(readlink -f ../$mongo_rocks_dir) src/mongo/db/modules/rocks


# compiling mongodb

export CC="/var/vcap/packages/gcc/bin/gcc" 
export CXX="/var/vcap/packages/gcc/bin/g++" 
export CPPPATH="$BOSH_INSTALL_TARGET/include /var/vcap/packages/compressors/include /var/vcap/packages/gcc/include /var/vcap/packages/openssl/include" 
export LIBPATH="$BOSH_INSTALL_TARGET/lib /var/vcap/packages/compressors/lib /var/vcap/packages/gcc/lib /var/vcap/packages/gcc/lib64 /var/vcap/packages/openssl/lib/*"
export LDFLAGS="-L/var/vcap/packages/compressors/lib -L/var/vcap/packages/gcc/lib -L/var/vcap/packages/gcc/lib64 -lsnappy -llz4 -lzstd"
export CPPFLAGS="-I/var/vcap/packages/gcc/include -I/var/vcap/packages/compressors/include -I$BOSH_INSTALL_TARGET/include"
export AR="/var/vcap/packages/binutils/bin/ar" 
export RANLIB="/var/vcap/packages/binutils/bin/ranlib" 
export LD="/var/vcap/packages/binutils/bin/ld" # not working ?
export NM="/var/vcap/packages/binutils/bin/nm"

# Patching SConstruct to retrieve environment non standard variables

sed -i "$(grep -n "\-\-\- other build setup" SConstruct|cut -d":" -f1)ifor key in Split('CC CXX AR RANLIB LD NM CFLAGS CXXFLAGS CCFLAGS LIBPATH'):\n  \
value = os.environ.get(key)\n  if value != None:\n    env[key] = Split(value)\nif os.environ.has_key('CPPFLAGS'):\n  \
env['CCFLAGS'] += SCons.Util.CLVar(os.environ['CPPFLAGS'])\nif os.environ.has_key('LDFLAGS'):\n  \
env['LINKFLAGS'] += SCons.Util.CLVar(os.environ['LDFLAGS'])\n" SConstruct

#here is the text appended:
#for key in Split('CC CXX AR RANLIB LD NM CFLAGS CXXFLAGS CCFLAGS LIBPATH'):
#  value = os.environ.get(key)
#  if value != None:
#    env[key] = Split(value)
#if os.environ.has_key('CPPFLAGS'):
#  env['CCFLAGS'] += SCons.Util.CLVar(os.environ['CPPFLAGS'])
#if os.environ.has_key('LDFLAGS'):
#  env['LINKFLAGS'] += SCons.Util.CLVar(os.environ['LDFLAGS'])

# create symbolics links to linker -- dirty solution !! didn t find how to pass linker path to scons

for _bin in `find /var/vcap/packages/binutils/bin -type f -print`
do
  if [ -x $_bin ]
  then
    fexec=`basename $_bin`
    [ -x /usr/bin/$fexec ] && mv /usr/bin/$fexec /usr/bin/${fexec}.old && ln -s $_bin /usr/bin/$fexec
  fi
done

# Patching necessary files (gcc 6.3)
#  patch -p0 src/third_party/boost-1.60.0/boost/function/function_base.hpp <../mongodb/function_base.hpp.patch
#  patch -p0 src/mongo/base/parse_number_test.cpp <../mongodb/parse_number_test.cpp.patch

# retrieve mongodb version from package name
  export _mongo_version=`echo $i|sed -e "s/.*[^[0-9]]*\([0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*\).*/\1/"`

  scons -j $cpun_ --ssl --prefix=$BOSH_INSTALL_TARGET   \
--disable-warnings-as-errors \
  MONGO_VERSION=$_mongo_version \
  core install

# striping binaries
  strip -sg $BOSH_INSTALL_TARGET/bin/*
  cd ..
done

# processing mongo-tools
for i in `find mongodb/ -type f -name 'mongo-tools-*.tar.gz' -print`
do
  ext_dir=`tar -tvf $i |tail -1|tr -s [:space:]| cut -d" " -f6 |cut -d"/" -f1`
  tar xf $i
  cd $ext_dir
  # need libpcap for mongoreplay
  source /var/vcap/packages/golang-1.8-linux/bosh/compile.env
  export CGO_LDFLAGS="-L/var/vcap/packages/gcc/lib -L/var/vcap/packages/gcc/lib64"
  ./set_gopath.sh
  ./build.sh
  [ ! -d $BOSH_INSTALL_TARGET/bin ] && mkdir -p $BOSH_INSTALL_TARGET/bin
  cp -rp bin/* $BOSH_INSTALL_TARGET/bin
  cd ..
done
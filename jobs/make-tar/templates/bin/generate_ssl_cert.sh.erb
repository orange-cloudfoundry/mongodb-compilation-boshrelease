#!/bin/bash

set -e # exit immediately if a simple command exits with a non-zero status.
set -u # report the usage of uninitialized variables.

source `dirname $(readlink -f $0)`/setenv

pushd `dirname $(readlink -f $0)` >/dev/null
cd ${MONGODB_SSL}

touch .rnd
export RANDFILE="${MONGODB_SSL}"/.rnd

# create chain certificate
cat mongodb.crt mongodb.ca>ca_chain.crt


# generate only if client and server keys doesnt already exists
if [ ! -f ${MONGODB_SSL}/server.pem -o ! -f ${MONGODB_SSL}/client.pem ]
then
	<%- mongo__current_ip = spec.ip -%>
	perl -e 'my $n1=int(rand(10));my $n2=int(rand(10));print "$n1$n2\n"' > mongodb.srl # two random digits number
	openssl genrsa -out server.key 2048
	openssl req -key server.key -new -out server.req -subj  "/C=FR/ST=IDF/O=Cloud Foundry/CN=<%= mongo__current_ip -%>/emailAddress=user@domain.com"
	openssl x509 -req -in server.req -CA mongodb.crt -CAkey mongodb.key -CAserial mongodb.srl -out server.crt -days 3650
	cat server.key server.crt > server.pem

	openssl genrsa -out client.key 2048
	openssl req -key client.key -new -out client.req -subj "/C=FR/ST=IDF/O=Cloud Foundry/CN=<%= mongo__current_ip -%>/emailAddress=user@domain.com"
	openssl x509 -req -in client.req -CA mongodb.crt -CAkey mongodb.key -CAserial mongodb.srl -out client.crt -days 3650
	cat client.key client.crt > client.pem
	#openssl verify -CAfile mongodb.ca client.pem

	# removing unneeded files
	# rm *.req *.srl *.crt *.key .rnd
fi

popd >/dev/null
exit 0
